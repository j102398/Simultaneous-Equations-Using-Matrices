#Create 3 simultaneous equations 
#Equation 1 : 3x + 2y -z = -1 
#Equation 2 : 2x - 3y + z = 14
#Equation 3: 4x + y - 3z = 2

x_1 = 3
y_1 = 2
z_1 = -1
product_1 = -1

x_2 = 2
y_2 = -3
z_2 = 1
product_2 = 14

x_3 =4
y_3 = 1
z_3 = -3
product_3 = 2

def matrices(a, b, c, product_a, d, e, f, product_b, g, h, i, product_c):
  # Assemble a 3 x 3 matrix
  matrix_letters = [
      [a, b, c],
      [d, e, f],
      [g, h, i]
  ]

  # Assemble a 3 x 1 matrix
  matrix_numbers = [
      [product_a],
      [product_b],
      [product_c]
  ]

  return matrix_letters, matrix_numbers


matrix_1, matrix_2 = matrices(x_1, y_1, z_1, product_1, x_2, y_2, z_2, product_2, x_3, y_3, z_3, product_3)



def minor_matrix(matrix):
  a = matrix[0][0]
  b = matrix[0][1]
  c = matrix[0][2]
  d = matrix[1][0]
  e = matrix[1][1]
  f = matrix[1][2]
  g = matrix[2][0]
  h = matrix[2][1]
  i = matrix[2][2]

  minor_a = (e * i) - (f * h)
  minor_b = (d * i) - (f * g)
  minor_c = (d * h) - (e * g)
  minor_d = (b * i) - (c * h)
  minor_e = (a * i) - (c * g)
  minor_f = (a * h) - (b * g)
  minor_g = (b * f) - (c * e)
  minor_h = (a * f) - (c * d)
  minor_i = (a * e) - (b * d)

  minor_matrix = [
    [minor_a,minor_b,minor_c],
    [minor_d,minor_e,minor_f],
    [minor_g,minor_h,minor_i]
  ]

  #Also return determinant
  determinant = (a* minor_a) - (b* minor_b) + (c * minor_c)
  return minor_matrix,determinant

matrix_of_minors,determinant = minor_matrix(matrix_1)


def cofactors_matrix(matrix):
  #Flip the signs where necessary
  # [+ - +]
  # [- + -]
  # [+ - +]
  cofactors = [
    [matrix[0][0],-matrix[0][1],matrix[0][2]],
    [-matrix[1][0],matrix[1][1],-matrix[1][2]],
    [matrix[2][0],-matrix[2][1],matrix[2][2]]
  ]
  return cofactors

matrix_of_cofactors = cofactors_matrix(matrix_of_minors)




def transpose_matrix(matrix):
  # Manually flip rows and columns for a 3x3 matrix
  transposed_matrix = [
      [matrix[0][0], matrix[1][0], matrix[2][0]],
      [matrix[0][1], matrix[1][1], matrix[2][1]],
      [matrix[0][2], matrix[1][2], matrix[2][2]]
  ]

  return transposed_matrix

transposed_matrix = transpose_matrix(matrix_of_cofactors)



def divide_by_determinant(matrix, determinant):
  # Check if the determinant is zero (matrix is singular)
  if determinant == 0:
      raise ValueError("Matrix is singular, and its inverse does not exist.")

  matrix[0][0] /= determinant
  matrix[0][1] /= determinant
  matrix[0][2] /= determinant

  matrix[1][0] /= determinant
  matrix[1][1] /= determinant
  matrix[1][2] /= determinant

  matrix[2][0] /= determinant
  matrix[2][1] /= determinant
  matrix[2][2] /= determinant

  return matrix

inverse_matrix = divide_by_determinant(transposed_matrix,determinant)
print(inverse_matrix)







def multiply_matrix(inverse_matrix, matrix_product):
  # Rename each bit of the inverse_matrix
  # [a, b, c]
  # [d, e, f]
  # [g, h, i]
  a = inverse_matrix[0][0]
  b = inverse_matrix[0][1]
  c = inverse_matrix[0][2]
  d = inverse_matrix[1][0]
  e = inverse_matrix[1][1]
  f = inverse_matrix[1][2]
  g = inverse_matrix[2][0]
  h = inverse_matrix[2][1]
  i = inverse_matrix[2][2]

  # Rename each of the matrix_product to a1, b2, c3
  # [a1]
  # [b1]
  # [c1]
  a1 = matrix_product[0][0]
  b1 = matrix_product[1][0]
  c1 = matrix_product[2][0]

  # Product matrix in the form, as these values correspond to x, y, and z.
  # [x]
  # [y]
  # [z]
  x = (a * a1) + (b * b1) + (c * c1)
  y = (d * a1) + (e * b1) + (f * c1)
  z = (g * a1) + (h * b1) + (i * c1)

  return x, y, z
  

x,y,z = multiply_matrix(inverse_matrix,matrix_2)

#We have to round our answers to a suitable number of decimal places because python has rounding errors
x = round(x,3)
y = round(y,3)
z = round(z,3)
print("x = ",x)
print("y = ",y)
print("z = ",z)




