#Solve simultaneous equation
# 2x + y = 5
# 4x - y =7
#Should solve to give x = 2 , y = 1


#x = 4 , y = 7
#2x + 3y = 29
#-x +20y = 136

x_1 = 2
y_1 = 3
value_1 = 29
x_2 = -1
y_2 = 20
value_2 = 136



  
def matrices(a,b,c,d,value_1,value_2):
  matrix_1 = [[a,b],[c,d]]
  matrix_2 = [[value_1],[value_2]]
  return matrix_1,matrix_2

matrix_1,matrix_2 = matrices(x_1,y_1,x_2,y_2,value_1,value_2)


def inverse_matrix(matrix):
  # Put in the form [a b]
  #                [c d]

  a = matrix[0][0]
  b = matrix[0][1]
  c = matrix[1][0]
  d = matrix[1][1]

  # Get determinant
  determinant = (a * d) - (b * c)
  if determinant == 0:
      error_message = "No Solutions"
      return error_message
  else:
      # Create inverse matrix in the form [a b]
      #                                   [c d]
      a_inv = d / determinant
      b_inv = -b / determinant
      c_inv = -c / determinant
      d_inv = a / determinant
      inverse_matrix = [[a_inv, b_inv], [c_inv, d_inv]]
      return inverse_matrix



inverse_matrix_1 = inverse_matrix(matrix_1)


def matrix_multiplication(matrix_1,matrix_2):
    
  #Get matrix_1 in form of [a b 
  #                         c d]

  a = matrix_1[0][0]
  b = matrix_1[0][1]
  c = matrix_1[1][0]
  d = matrix_1[1][1]

  #Get matrix_2 in form [e]
  #                     [f]
  
  e = matrix_2[0][0]
  f = matrix_2[1][0]

  #Perform the matrix multiplication

  #Product matrix will be in form [product_a]
  #                               [product_b]
  product_a = (a*e) + (b*f)
  product_b = (c*e) + (d*f)
  return product_a,product_b


x,y = matrix_multiplication(inverse_matrix_1,matrix_2)

#Round to 9 dp as unfortunately python does not use exact values
x = round(x,9)
y = round(y,9)
print("x =", x)
print("y =",y)
