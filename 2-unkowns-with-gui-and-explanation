import tkinter as tk

import tkinter as tk

def explain_matrix_multiplication():
    root = tk.Tk()
    root.geometry("300x300")
    explain_label = tk.Label(root, text="Multiply both sides  with the inverse matrix  \nto get x and y values:", pady=1)
    explain_label.grid(row=0, column=0)


    arrow_label = tk.Label(root, text="↓", font=("Arial", 20))
    arrow_label.grid(row=1, column=0)

    #Explain
    explain_label = tk.Label(root, text="Leaving us with this:",pady=1)
    explain_label.grid(row=2, column=0)

    matrix_text = f'''
        [x] _ [{x}]
        [y] ‾ [{y}]'''

    matrix_label = tk.Label(root,text=matrix_text,pady=1)
    matrix_label.grid(row=3,column=0)

    # Explain
    explain_label_2 = tk.Label(root, text="Therefore:", pady=1)
    explain_label_2.grid(row=4, column=0)

    #Product label

    product_text = f'''
    x = {x}
    y = {y}'''
    product_label = tk.Label(root,text=product_text)
    product_label.grid(row=5,column=0)


def explain_invert_matrix():
    root = tk.Tk()
    root.geometry("300x300")
    explain_label = tk.Label(root, text="Find the inverse of the coefficient matrix:", pady=1)
    explain_label.grid(row=0, column=0, pady=2)

    # Split up the original 2x2 matrix into a,b,c,d
    a = matrix_1[0][0]
    b = matrix_1[0][1]
    c = matrix_1[1][0]
    d = matrix_1[1][1]

    # Firstly, find determinant:
    determinant = (a * d) - (b * c)
    determinant_label = tk.Label(root, text=f"The Determinant is : {determinant}")
    determinant_label.grid(row=1, column=0)


    arrow_label = tk.Label(root, text="↓", font=("Arial", 20))
    arrow_label.grid(row=2, column=0)
    #Get Inverse matrix :

    inverse_matrix_text = f'''
    Inverse Matrix:
        1/{determinant}   [{d} -({b})]
                    [-({c}) {a}]
    '''


    inverse_matrix_label = tk.Label(root,text=inverse_matrix_text)
    inverse_matrix_label.grid(row=3,column=0)

    # Put next step
    next_step_button = tk.Button(root, text="Next Step", command=lambda: [explain_matrix_multiplication(),root.destroy()])
    next_step_button.grid(row=4, column=0)


def show_steps():
    root = tk.Tk()
    root.geometry("300x300")
    explain_label = tk.Label(root, text="Express Equations as a system of matrices:", pady=1)
    explain_label.grid(row=0, column=0)
    # Split up the original 2x2 matrix into a,b,c,d
    a = matrix_1[0][0]
    b = matrix_1[0][1]
    c = matrix_1[1][0]
    d = matrix_1[1][1]
    # Split the 2x1 matrix into e,f
    e = matrix_2[0][0]
    f = matrix_2[1][0]

    # Print original equation
    equation_1 = f"{a}x + {b}y ={e}"
    equation_2 = f"{c}x + {d}y ={f}"

    equation_1_label = tk.Label(root, text=equation_1)
    equation_2_label = tk.Label(root, text=equation_2)

    equation_1_label.grid(row=1, column=0)
    equation_2_label.grid(row=2, column=0)

    # Put downwards arrow
    arrow_label = tk.Label(root, text="↓", font=("Arial", 20))
    arrow_label.grid(row=3, column=0)

    # Put all in one string for formatting purposes

    text_1 = f'''
    [{a} {b}][x] _ [{e}]
    [{c} {d}][y] ‾ [{f}]'''

    matrix_label = tk.Label(root, text=text_1)
    matrix_label.grid(row=4, column=0)

    # Put next step

    next_step_button = tk.Button(root, text="Next Step", command=lambda: [explain_invert_matrix(),root.destroy()])
    next_step_button.grid(row=5, column=0)


def display_product(x,y):
    # Pass through the inverse matrix to show the steps
    root = tk.Tk()
    root.geometry("300x300")

    # Round to a certain amount of dp because python doesn't use exact values during calculations

    x = round(x, 3)
    y = round(y, 3)

    x_label = tk.Label(root, text=f"X = {x}", pady=4)
    x_label.grid(row=0, column=0)

    y_label = tk.Label(root, text=f"Y = {y}")
    y_label.grid(row=1, column=0)

    show_steps_button = tk.Button(root, text="Show Steps", pady=4, command=lambda: [show_steps(),root.destroy()])
    show_steps_button.grid(row=2, column=0)


def matrix_multiplication(matrix_1, matrix_2):
    # Get matrix_1 in form of [a b
    #                         c d]

    a = matrix_1[0][0]
    b = matrix_1[0][1]
    c = matrix_1[1][0]
    d = matrix_1[1][1]

    # Get matrix_2 in form [e]
    #                     [f]

    e = matrix_2[0][0]
    f = matrix_2[1][0]

    # Perform the matrix multiplication

    # Product matrix will be in form [product_a]
    #                               [product_b]
    global x
    global y
    x = (a * e) + (b * f)
    y = (c * e) + (d * f)
    display_product(x,y)


def inverse_matrix(matrix, matrix_2):
    # Put in the form [a b]
    #                [c d]

    a = matrix[0][0]
    b = matrix[0][1]
    c = matrix[1][0]
    d = matrix[1][1]

    # Get determinant
    global determinant
    determinant = (a * d) - (b * c)
    if determinant == 0:
        error_message = "No Solutions"
        return error_message
    else:
        # Create inverse matrix in the form [a b]
        #                                   [c d]
        a_inv = d / determinant
        b_inv = -b / determinant
        c_inv = -c / determinant
        d_inv = a / determinant
        global inverse_matrix
        inverse_matrix = [[a_inv, b_inv], [c_inv, d_inv]]
        matrix_multiplication(inverse_matrix, matrix_2)
        print(inverse_matrix)


def matrices(a, b, c, d, value_1, value_2):
    global matrix_1
    global matrix_2
    matrix_1 = [[float(a), float(b)], [float(c), float(d)]]
    matrix_2 = [[float(value_1)], [float(value_2)]]

    print(matrix_1)
    print(matrix_2)
    root.destroy()
    inverse_matrix(matrix_1, matrix_2)


def create_matrix_window(root):  # Pass 'root' as an argument
    root.title("Enter the equation:")
    root.geometry("300x300")

    # Equation one
    x1_entry_1 = tk.Entry(root, width=5)
    x1_entry_1.grid(row=0, column=0)

    x1_label = tk.Label(root, text="x")
    x1_label.grid(row=0, column=1)

    plus_sign_1 = tk.Label(root, text=" + ")
    plus_sign_1.grid(row=0, column=2)

    y1_entry_1 = tk.Entry(root, width=5)
    y1_entry_1.grid(row=0, column=3)

    y1_label = tk.Label(root, text="y")
    y1_label.grid(row=0, column=4)

    equals_1 = tk.Label(root, text=" = ")
    equals_1.grid(row=0, column=5)

    total_1 = tk.Entry(root, width=5)
    total_1.grid(row=0, column=6)

    # Equation two
    x2_entry_1 = tk.Entry(root, width=5)
    x2_entry_1.grid(row=1, column=0)

    x2_label = tk.Label(root, text="x")
    x2_label.grid(row=1, column=1)

    plus_sign_2 = tk.Label(root, text=" + ")
    plus_sign_2.grid(row=1, column=2)

    y2_entry_1 = tk.Entry(root, width=5)
    y2_entry_1.grid(row=1, column=3)

    y2_label = tk.Label(root, text="y")
    y2_label.grid(row=1, column=4)

    equals_2 = tk.Label(root, text=" = ")
    equals_2.grid(row=1, column=5)

    total_2 = tk.Entry(root, width=5)
    total_2.grid(row=1, column=6)

    submit_button = tk.Button(root, text="Calculate", command=lambda: matrices(
        x1_entry_1.get(), y1_entry_1.get(), x2_entry_1.get(), y2_entry_1.get(), total_1.get(), total_2.get()))
    submit_button.grid(row=3, column=6)


root = tk.Tk()

create_matrix_window(root)

root.mainloop()
